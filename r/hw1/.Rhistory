simple.eda(observe1000);
observe1000 = observe(1000, 500);
simple.eda(observe1000);
observe1000 = observe(1000, 500);
simple.eda(observe1000);
observe1000 = observe(1000, 500);
simple.eda(observe1000);
observe1000 = observe(1000, 500);
simple.eda(observe1000);
observe1000 = observe(1000, 500);
simple.eda(observe1000);
observe1000 = observe(1000, 500);
simple.eda(observe1000);
observe1000 = observe(1000, 500);
simple.eda(observe1000);
observe1000 = observe(1000, 500);
simple.eda(observe1000);
observe1000 = observe(1000, 500);
simple.eda(observe1000);
observe1000 = observe(1000, 500);
simple.eda(observe1000);
observe1000 = observe(1000, 500);
simple.eda(observe1000);
observe1000 = observe(1000, 500);
simple.eda(observe1000);
?simple.eda(observe1000);
observe10 = observe(10, 500);
qqnorm(observe10);
qqline(observe10);
observe1000 = observe(1000, 500);
qqnorm(observe1000);
qqline(observe1000);
observe10 = observe(10, 500);
qqnorm(observe10);
qqline(observe10);
observe1000 = observe(1000, 500);
qqnorm(observe1000);
qqline(observe1000);
observe1000 = observe(1000, 500);
qqnorm(observe1000);
qqline(observe1000);
observe1000 = observe(1000, 500);
qqnorm(observe1000);
qqline(observe1000);
observe1000 = observe(1000, 500);
qqnorm(observe1000);
qqline(observe1000);
observe1000 = observe(1000, 500);
qqnorm(observe1000);
qqline(observe1000);
observe1000 = observe(1000, 500);
qqnorm(observe1000);
qqline(observe1000);
observe1000 = observe(1000, 500);
qqnorm(observe1000);
qqline(observe1000);
observe1000 = observe(1000, 500);
qqnorm(observe1000);
qqline(observe1000);
geomProb = 21 / 90;
ans1 = pgeom(5, geomProb) - pgeom(1, geomProb);
ans1;
geomProb = (S + D + 9) / 90;
a = pgeom(W + 5 - 1, geomProb) - pgeom(min(c(2, A)), geomProb);
W = 1
A = 7
S = 9
D = 3
# а) P(6 > X >= 2) = P(2 <= X <= 5), X ~ Ge(p = 21/90)
geomProb = (S + D + 9) / 90;
a = pgeom(W + 5 - 1, geomProb) - pgeom(min(c(2, A)), geomProb);
ans1;
a
min(c(2, A))
?min
c(2, A)
a = pgeom(W + 5 - 1, geomProb) - pgeom(min(c(2, A) - 1), geomProb);
a
ans1;
geomProb = (S + D + 9) / 90;
a = pgeom((W + 5) - 1, geomProb) - pgeom(min(c(2, A) - 1), geomProb);
ans1;
a
lambda = D + 1.5;
b = ppois(5, lambda) - ppois(3, lambda);
b
b = ppois(W + 4, lambda) - ppois(min(c(3, A)), lambda);
b
zProb = (W + A + S + D + 11) / 111;
zQuantile = abs(qnorm((1 - zProb) / 2))
zQuantile = abs(qnorm((1 - zProb) / 2))
testProb = 1 - pnorm(zQuantile, lower.tail = FALSE) - pnorm(-zQuantile)
abs(zProb - testProb) <= 1e-14
zProb = (W + A + S + D + 11) / 111;
v = abs(qnorm((1 - zProb) / 2));
v
v = abs(qnorm((1 - zProb) / 2))
v = abs(qnorm((1 - zProb) / 2));
tProb = (55 + W + A) / 100;
lowerTailProb = pt(-1.5, 33);
tQuantile = qt(lowerTailProb + tProb, 33)
testProb = pt(tQuantile, 33) - pt(-1.5, 33)
abs(tProb - testProb) <= 1e-14
abs(tProb - g) <= 1e-14
g = pt(tQuantile, 33) - pt(-1.5, 33)
abs(tProb - g) <= 1e-14
zProb = (W + A + S + D + 11) / 111;
zStar = abs(qnorm((1 - zProb) / 2));
# check
testProb = 1 - pnorm(zStar, lower.tail = FALSE) - pnorm(-zStar)
abs(zProb - testProb) <= 1e-14
testProb = pt(x, 33) - pt(-1.5, 33)
abs(tProb - testProb) <= 1e-14 # проверяваме, че
tProb = (55 + W + A) / 100;
lowerTailProb = pt(-1.5, 33);
x = qt(lowerTailProb + tProb, 33)
testProb = pt(x, 33) - pt(-1.5, 33)
abs(tProb - testProb) <= 1e-14 # проверяваме, че
W = 1
A = 7
S = 9
D = 3
# а)
geomProb = (S + D + 9) / 90;
a = pgeom((W + 5) - 1, geomProb) - pgeom(min(c(2, A) - 1), geomProb);
# б)
lambda = D + 1.5;
b = ppois(W + 4, lambda) - ppois(min(c(3, A)), lambda);
# в)
zProb = (W + A + S + D + 11) / 111;
zStar = abs(qnorm((1 - zProb) / 2));
# проверка на коректността на zStar
testProb = 1 - pnorm(zStar, lower.tail = FALSE) - pnorm(-zStar);
abs(zProb - testProb) <= 1e-14;
# г)
tProb = (55 + W + A) / 100;
lowerTailProb = pt(-1.5, 33);
x = qt(lowerTailProb + tProb, 33);
# проверка на коректността на x
testProb = pt(x, 33) - pt(-1.5, 33);
abs(tProb - testProb) <= 1e-14;
W = 1
A = 7
S = 9
D = 3
# а)
geomProb = (S + D + 9) / 90;
a = pgeom((W + 5) - 1, geomProb) - pgeom(min(c(2, A) - 1), geomProb);
# б)
lambda = D + 1.5;
b = ppois(W + 4, lambda) - ppois(min(c(3, A)), lambda);
# в)
zProb = (W + A + S + D + 11) / 111;
zStar = abs(qnorm((1 - zProb) / 2));
# проверка на коректността на zStar
testProb = 1 - pnorm(zStar, lower.tail = FALSE) - pnorm(-zStar);
abs(zProb - testProb) <= 1e-14;
# г)
tProb = (55 + W + A) / 100;
lowerTailProb = pt(-1.5, 33);
x = qt(lowerTailProb + tProb, 33);
# проверка на коректността на x
testProb = pt(x, 33) - pt(-1.5, 33);
abs(tProb - testProb) <= 1e-14;
a
b
zStar
x
midProb = (55 + W + A) / 100;
lowerTailProb = pt(-1.5, 33);
x = qt(lowerTailProb + midProb, 33);
# проверка на коректността на x
testProb = pt(x, 33) - pt(-1.5, 33);
abs(midProb - testProb) <= 1e-14;
a
b
zStar
x
W = 1;
A = 7;
S = 9;
D = 3;
# а)
geomProb = (S + D + 9) / 90;
a = pgeom((W + 5) - 1, geomProb) - pgeom(min(c(2, A) - 1), geomProb);
# б)
lambda = D + 1.5;
b = ppois(W + 4, lambda) - ppois(min(c(3, A)), lambda);
# в)
zProb = (W + A + S + D + 11) / 111;
zStar = abs(qnorm((1 - zProb) / 2));
# проверка на коректността на zStar
testProb = 1 - pnorm(zStar, lower.tail = FALSE) - pnorm(-zStar);
abs(zProb - testProb) <= 1e-14;
# г)
midProb = (55 + W + A) / 100;
lowerTailProb = pt(-1.5, 33);
x = qt(lowerTailProb + midProb, 33);
# проверка на коректността на x
testProb = pt(x, 33) - pt(-1.5, 33);
abs(midProb - testProb) <= 1e-14;
a
b
zStar
x
97!
factorial(97)
factorial(97) * choose(100, 3) / factorial(100)
theoretical = factorial(97) * choose(100, 3) / factorial(100)
theoretical;
?match
theoreticalProb = factorial(97) * choose(100, 3) / factorial(100);
experiment = function () {
permutation = sample(100);
!is.unsorted(match(c(20, 12, 16), permutation));
};
simulation = function (size) {
sample = simple.sim(size, experiment);
length(sample[sample == 1]) / size;
};
sims = simple.sim(100, simulation, 1e4);
mean(sims);
# 1 simulation with 1e6 experiments = 0.16687
# 10 simulations with 1e5 experiments = 0.166737
# 100 simulations with 1e4 experiments = 0.166893
?t.test
t.test(x, conf.level=0.95) # here the variance is unknown
x = rnorm(100, 6, 2); # has a variance of 4
t.test(x, conf.level=0.95) # here the variance is unknown
set.seed(1337)
x = rnorm(100)
set.seed(1337)
x = rnorm(100, 180, 10)
t.test(x, alternative = "greater")
t.test(x, mu = 185, alternative = "greater")
t.test(x, mu = 180.1, alternative = "greater")
x = rnorm(1e6, 180, 10)
x = rnorm(1e6, 180, 10)
t.test(x, mu = 180.1, alternative = "greater")
mean(c(7.4, 7.1, 6.5, 7.5, 7.6, 6.3, 6.9, 7.7, 6.5, 7.0))
sd(c(7.4, 7.1, 6.5, 7.5, 7.6, 6.3, 6.9, 7.7, 6.5, 7.0))
sd(c(7.4, 7.1, 6.5, 7.5, 7.6, 6.3, 6.9, 7.7, 6.5, 7.0))^2
sd(c(7.4, 7.1, 6.5, 7.5, 7.6, 6.3, 6.9, 7.7, 6.5, 7.0))
var(c(7.4, 7.1, 6.5, 7.5, 7.6, 6.3, 6.9, 7.7, 6.5, 7.0))
qt(0.01, 9)
?qt
t.test(x,y,alt="less",var.equal=TRUE)
x = c(15, 10, 13, 7, 9, 8, 21, 9, 14, 8)
y = c(15, 14, 12, 8, 14, 7, 16, 10, 15, 12)
t.test(x,y,alt="less",var.equal=TRUE)
t.test(x,y,alt="less")
wilcox.test(x, y, alt = "less", conf.int = TRUE);
# Verizani page 69 example: Recovery time fo new drug
# H0: mu_x >= mu_y
# Ha: mu_x < mu_y (the pharmaceutical company wants to prove its drug is good)
# we assume that var_x = var_y
x = c(15, 10, 13, 7, 9, 8, 21, 9, 14, 8);
y = c(15, 14, 12, 8, 14, 7, 16, 10, 15, 12);
t.test(x, y, alt="less", var.equal = TRUE);
# => with or without the drug, there is no difference
t.test(x, y, alt = "less");
wilcox.test(x, y, alt = "less", conf.int = TRUE);
x = c(3, 0, 5, 2, 5, 5, 5, 4, 4, 5)
y = c(2, 1, 4, 1, 4, 3, 3, 2, 3, 5)
t.test(x, y, paired=TRUE)
t.test(x-y, mu = 0, alt="two.sided", sig.level=0.05)
?t.test(x-y, mu = 0, alt="two.sided", sig.level=0.05)
t.test(x-y, mu = 0, alt="two.sided", sig.level=0.05)
?chisq.test()
?chisq.test(x/100, p=th_prob)
chisq.test(x/100, p=th_prob)
x = c(15, 14, 20, 10, 21, 20)
theory_prob = rep(1/6, 6)
chisq.test(x/100, p=th_prob)
x = c(15, 14, 20, 10, 21, 20)
th_prob = rep(1/6, 6)
chisq.test(x/100, p=th_prob)
x = c(15, 14, 20, 10, 21, 20)
th_prob = rep(1/6, 6)
chisq.test(x, p=th_prob)
obs = x
expect = th_prob * 100
(obs-expected)^2
obs = x
expected = th_prob * 100
(obs-expected)^2
obs = x
expected = th_prob * 100
sum(((obs-expected)^2) / expected)
chisq.test(x, p=th_prob)
yesbelt = c(12813,647,359,42)
nobelt = c(65963,4000,2642,303)
belt = data.frame(yesbelt,nobelt)
belt
chisq.test(belt)
?chisq.test(belt)
library(UsingR)
blood
chisq.test(blood)
qchisq(0.1, length(blood), lower.tail = FALSE)
blood$Machine
blood$Expert
chisq.test(blood$Expert, p = blood$Machine)
t.test(blood$Machine, blood$Expert, mu = 0, alt = "two.sided", sig.level = 0.05)
qt(0.05, length(blood) - 1, lower.tail = FALSE)
t.test(blood$Machine, blood$Expert, mu = 0, alt = "two.sided", sig.level = 0.05)
blood$Machine
blood$Expert
t.test(blood$Machine, blood$Expert, mu = 0, alt = "two.sided", sig.level = 0.1)
library(UsingR)
# H0: mu_m == mu_e
# Ha: mu_m != mu_e
blood
t.test(blood$Machine, blood$Expert, mu = 0, alt = "two.sided", sig.level = 0.1)
blood
qt(0.1 / 2, length(blood) - 1)
t.test(blood$Machine, blood$Expert, mu = 0, alt = "two.sided", sig.level = 0.1)
qt(0.1 / 2, length(blood) - 1)
qt(0.1 / 2, length(blood) - 1)
qt(0.1 / 2, length(blood) - 1, lower.tail = FALSE)
qt(0.1 / 2, length(blood) - 1)
qt(0.1 / 2, length(blood) - 1, lower.tail = FALSE)
t.test(blood$Machine, blood$Expert, mu = 0, alt = "two.sided", sig.level = 0.1)
library(UsingR)
# task 1
# H0: mu_m == mu_e
# Ha: mu_m != mu_e
blood
qt(0.1 / 2, length(blood) - 1)
qt(0.1 / 2, length(blood) - 1, lower.tail = FALSE)
# are the variances equal?
var(blood$Machine)
var(blood$Expert)
?t.test(blood$Machine, blood$Expert, mu = 0, alt = "two.sided", sig.level = 0.1)
t.test(blood$Machine, blood$Expert, mu = 0, alt = "two.sided", sig.level = 0.1)
res = t.test(blood$Machine, blood$Expert, mu = 0, alt = "two.sided", sig.level = 0.1)
tes.statistic
res.statistic
res
m = blood$Machine
e = blood$Expert
mean(m - e)/var(m - e)/sqrt(length(m))
res = t.test(blood$Machine, blood$Expert, paired = TRUE, alt = "two.sided", sig.level = 0.1)
res
hist(m)
hist(e)
hist(m)
hist(e)
pt()
mean(m - e)/var(m - e)/sqrt(length(m))
pt(q = 0.007997311, df = 14)
t.test(blood$Machine, blood$Expert, paired = TRUE, sig.level = 0.1)
2 * pt(q = 0.007997311, df = 14)
t.test(blood$Machine, blood$Expert, paired = TRUE, sig.level = 0.05)
qt(0.1 / 2, length(blood) - 1)
qt(0.1 / 2, length(blood) - 1, lower.tail = FALSE)
mean(m - e)/sd(m - e)/sqrt(length(m))
2 * pt(q = 0.04544114, df = 14)
t.test(blood$Machine, blood$Expert, paired = TRUE)
(mean(m - e) * sqrt(length(m))/sd(m - e)
(mean(m - e) * sqrt(length(m)))/sd(m - e)
a
(mean(m - e) * sqrt(length(m)))/sd(m - e)
2 * pt(q = 0.681617, df = 14)
pt(q = 0.681617, df = 14)
pt(q = 0.681617, df = 14, lower.tail = false)
pt(q = 0.681617, df = 14, lower.tail = FALSE)
t.test(blood$Machine, blood$Expert, paired = TRUE)
pt(q = -0.681617, df = 14, lower.tail = TRUE)
pt(q = 0.681617, df = 14, lower.tail = FALSE)
pt(q = -0.681617, df = 14, lower.tail = TRUE)
pt(q = 0.681617, df = 14, lower.tail = FALSE) + pt(q = -0.681617, df = 14, lower.tail = TRUE)
2 * pt(q = 0.681617, df = 14, lower.tail = FALSE)
(mean(m - e) * sqrt(length(m)))/sd(m - e)
2 * pt(q = 0.681617, df = 14, lower.tail = FALSE)
t.test(blood$Machine, blood$Expert, paired = TRUE)
(mean(m - e) * sqrt(length(m)))/sd(m - e)
2 * pt(q = 0.681617, df = 14, lower.tail = FALSE)
blood
alpha = 0.1
df = length(blood) - 1
qt(alpha / 2, df)
qt(alpha / 2, df, lower.tail = FALSE)
var(m)
var(e)
t.test(blood$Machine, blood$Expert, paired = TRUE)
library(UsingR)
brightness
qqnorm(brightness)
qqplot(brightness)
qqline(brightness)
qqplot(brightness)
qqline(brightness)
qqplot(brightness)
qqnorm(brightness)
qqline(brightness)
hist(brightness)
qqnorm(brightness)
qqline(brightness)
?qqline(brightness)
data(ewr)
# read in data set
attach(ewr)
# unattach later
tmp=subset(ewr, inorout == "out",select=c("AA","NW"))
x=tmp[['AA']]
# alternately AA[inorout==’out’]
y=tmp[['NW']]
boxplot(x,y)
brightness
hist(brightness)
qqnorm(brightness)
qqline(brightness)
hist(brightness)
t.test(brightness, conf.level = 0.93)
mean(brightness)
var(brightness)
t.test(brightness, conf.level = 0.93)
wilcox.test(brightness)
?qqplot
wilcox.test(brightness, conf.int = TRUE, conf.level = 0.93)
t.test(brightness, conf.level = 0.93)
median(brightness)
mode(brightness)
mode = function(x) {
ux = unique(x)
ux[which.max(tabulate(match(x, ux)))]
}
mode(brightness)
median(brightness)
mean(brightness)
prop.test(1000, 1337)
simple.eda(brightness)
simple.eda(brightness)
?prop.test(1000, 1337)
?prop.test(1000, 1337, alt = "greater")
prop.test(1000, 1337, alt = "greater")
prop.test(1000, 1337, alt = "greater", p = 0.7)
prop.test(1000, 1337, alt = "greater", p = 0.7, conf.level = 0.95)
1000/1337
blood
alpha = 0.1
df = length(blood) - 1
qt(alpha / 2, df, lower.tail = FALSE)
var(m)
var(e)
simple.eda(m)
simple.eda(e)
(mean(m - e) * sqrt(length(m)))/sd(m - e)
ts = (mean(m - e) * sqrt(length(m)))/sd(m - e)
2 * pt(q = ts, df = 14, lower.tail = FALSE)
simple.eda(m)
simple.eda(m)
simple.eda(m)
simple.eda(e)
simple.eda(m)
simple.eda(e)
t.test(blood$Machine, blood$Expert, paired = TRUE)
mean(m - e)
median(brightness)
mode(brightness)
mean(brightness)
t.test(brightness, conf.level = 0.93)
wilcox.test(brightness, conf.int = TRUE, conf.level = 0.93)
library(UsingR)
brightness
# разпределението на извадката изглежда симетрично и наподобява нормалното разпределение
simple.eda(brightness)
t.test(brightness, conf.level = 0.93)
prop.test(1000, 1337, alt = "greater", p = 0.7, conf.level = 0.95)
?t.test(blood$Machine, blood$Expert, paired = TRUE)
data = c(2, 18, 29, 30, 47, 54, 54, 56, 61, 62, 65, 85)
summary(data)
normalOrFighting = data[data$Type1 == "Normal" | data$Type1 == "Fighting",]
library(UsingR)
setwd("/home/tony/Documents/Code/FMI/R/hw1")
pokemons = read.csv("pokemon.csv")
attach(pokemons)
set.seed(61793)
sampleRows = sample(nrow(pokemons), 600)
data = pokemons[sampleRows,]
head(data)
pie(summary(Type1), main = "Type1")
pie(summary(Type2), main = "Type2")
hist(Attack, xlim = c(1,200))
boxplot(Defense, horizontal = TRUE, main = "Defense")
boxplot(Height, horizontal = TRUE, main = "Height")
simple.hist.and.boxplot(Weight)
lightest = data[data$Weight == min(Weight),]
tallest = data[data$Height == max(Height),]
above220 = data[data$Attack + data$Defense > 220,]
dragonsCount = nrow(data[(data$Type1 == "Dragon" | data$Type2 == "Dragon") & data$Height > 1.0,])
type2weights = data[data$Type2 != "",]$Weight
hist(type2weights, prob=T)
lines(density(type2weights))
normalOrFighting = data[data$Type1 == "Normal" | data$Type1 == "Fighting",]
boxplot(normalOrFighting$Height~normalOrFighting$Type1)
correlation = cor(Height, Weight)
correlation
model = simple.lm(Height, Weight)
summary(model)
length(a(a>2))
length(c(a>2))
x = c(1, 3, 5, 7, 9)
y = c(2, 3, 5, 7, 11, 13)
x + y
sum(x>5)
x>5
sum(x[x>5])
x > 5 | x < 3
x > 5 || x < 3
x > 5 | x < 3
